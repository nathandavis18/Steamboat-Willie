@page
@model SteamboatWillieWeb.Pages.Availability.IndexModel
@{
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">

<h2>Availability</h2>
<form method="post" enctype="multipart/form-data" id="form" onsubmit="return validateForm()">
    <input asp-for="objAvailability.Id" hidden />
    <input asp-for="objAvailability.LocationId" hidden/>
    <input asp-for="objAvailability.AppointmentCategoryId" hidden/>
    <div class="form-control bg-black">
        <div class="form-group mb-3">
            <label for="startDate" class="text-white">Start: </label>
            <div class="input-group">
                <input asp-for="objAvailability.StartTime" name="startDate" id="startDate" class="form-control bg-secondary text-white" type="date" />
                <span id="startCalendarIcon" class="input-group-text bg-secondary">
                    <i class="bi bi-calendar-week-fill"></i>
                </span>
            </div>
            <span id="startDateError"></span>
        </div>
        <div class="form-group mb-3">
            <div>
                <label for="appointmentDuration" class="text-white">Appointment Duration: </label>
                <select asp-for="objAvailability.Duration" name="objAvailability.Duration" id="appointmentDuration" class="form-select bg-secondary text-white">
                    <option selected>Select:</option>
                    <option value="00:15:00">15 Min</option>
                    <option value="00:30:00">30 Min</option>
                    <option value="01:00:00">60 Min</option>
                </select>
            </div>
            <span id="appointmentDurationError"></span>
        </div>
        <div class="form-group mb-3">
            <div>
                <label for="numAppointments" class="text-white">Number of Appointments: </label>
                <input name="numAppointments" id="numAppointments" class="form-control bg-secondary text-white" type="number" />
            </div>
            <span id="numAppointmentsError"></span>
        </div>
        <div class="form-group mb-3">
            <label for="startTime" class="text-white">Start Time: </label>
            <div class="input-group">
                <input asp-for="objAvailability.StartTime" name="startTime" id="startTime" class="form-control bg-secondary text-white" type="time" />
                <span id="clockIcon" class="input-group-text bg-secondary">
                    <i class="bi bi-clock-fill"></i>
                </span>
            </div>
            <span id="startTimeError"></span>
        </div>
        <div class="form-group mb-3">
            <div>
                <label for="location" class="text-white">Location: </label>
                <input asp-for="objLocation.LocationValue" id="location" class="form-control bg-secondary text-white" placeholder="Zoom link, Office, etc" />
            </div>
        </div>
        <div class="form-group mb-3">
            <div>
                <label for="recurrence" class="text-white">Recurrence: </label>
                <input id="recurrence" name="recurrence" class="bg-secondary text-white" type="checkbox" />
            </div>
            <span id="recurrenceError"></span>
        </div>
        <div class="form-group mb-3" id="otherThings" style="display: none">
            <div>
                <label for="weekDays" class="text-white">Days of the Week: </label>
                <div class="dropdown mb-3">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" aria-expanded="false">
                        Select Options
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="Sunday" id="checkbox1" name="weekDays[]">
                            <label class="form-check-label" for="checkbox1">
                                Sunday
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="Monday" id="checkbox2" name="weekDays[]">
                            <label class="form-check-label" for="checkbox2">
                                Monday
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="Tuesday" id="checkbox3" name="weekDays[]">
                            <label class="form-check-label" for="checkbox3">
                                Tuesday
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="Wednesday" id="checkbox4" name="weekDays[]">
                            <label class="form-check-label" for="checkbox4">
                                Wednesday
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="Thursday" id="checkbox5" name="weekDays[]">
                            <label class="form-check-label" for="checkbox5">
                                Thursday
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="Friday" id="checkbox6" name="weekDays[]">
                            <label class="form-check-label" for="checkbox6">
                                Friday
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="Saturday" id="checkbox7" name="weekDays[]">
                            <label class="form-check-label" for="checkbox7">
                                Saturday
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label for="weekly" class="text-white">Weekly: </label>
                    <input id="weekly" name="weekly" class="bg-secondary text-white" type="checkbox" />
                </div>

                <div class="form-group mb-3">
                    <label for="endDate" class="text-white">Until: </label>
                    <div class="input-group">
                        <input id="endDate" name="endDate" class="form-control bg-secondary text-white" type="date" />
                        <span id="endCalendarIcon" class="input-group-text bg-secondary">
                            <i class="bi bi-calendar-week-fill"></i>
                        </span>
                    </div>
                    <span id="endDateError"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="text-end">
        <button type="submit" class="btn btn-secondary">Set Availability</button>
    </div>
</form>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>document.getElementById('startCalendarIcon').addEventListener('click', function () {
        document.getElementById('startDate').click();
    });

    document.getElementById('endCalendarIcon').addEventListener('click', function () {
        document.getElementById('endDate').click();
    });

    document.getElementById('clockIcon').addEventListener('click', function () {
        document.getElementById('startTime').focus();
    });

    document.getElementById('startDate').addEventListener('change', function () {
        document.getElementById('startDate').blur(); // Blur to close date picker
    });

    document.getElementById("recurrence").addEventListener("change", function () {
        var otherThings = document.getElementById("otherThings");
        if (this.checked) {
            otherThings.style.display = "block";
        } else {
            otherThings.style.display = "none";
        }
    });

    document.addEventListener('DOMContentLoaded', function () {
        var dropdownToggle = document.querySelector('.dropdown-toggle');
        var dropdownMenu = document.querySelector('.dropdown-menu');

        dropdownToggle.addEventListener('click', function () {
            dropdownMenu.classList.toggle('show');
        });

        // Close the dropdown menu if the user clicks outside of it
        window.addEventListener('click', function (event) {
            if (!dropdownToggle.contains(event.target) && !dropdownMenu.contains(event.target)) {
                dropdownMenu.classList.remove('show');
            }
        });
    });

    document.getElementById("form").addEventListener("submit", function (event) {
        // Prevent form submission if any validation fails
        if (!validateForm()) {
            event.preventDefault();
        }
    });

    function validateForm() {
        var isValid = true;

        // 1. StartDate is not before today
        var startDate = new Date(document.getElementById("startDate").value);
        var today = new Date();
        today.setHours(0, 0, 0, 0);
        if (startDate < today) {
            displayErrorMessage("startDate", "Start date cannot be before today.");
            TempData["error_message"] = "Start date cannot be before today.";
            isValid = false;
        } else {
            hideErrorMessage("startDate");
        }

        // 2. End Date is not before today AND not before start
        var endDate = new Date(document.getElementById("endDate").value);
        if (endDate < today) {
            displayErrorMessage("endDate", "End date cannot be before today.");
            TempData["error_message"] = "End date cannot be before today.";
            isValid = false;
        } else {
            hideErrorMessage("endDate");
        }

        // 3. If recurrence checkbox is checked, then at least the weekly checkbox is checked OR at least one day is selected in the weekday dropdown
        var recurrenceCheckbox = document.getElementById("recurrence");
        if (recurrenceCheckbox.checked) {
            var weeklyCheckbox = document.getElementById("weekly");
            var weekDaysCheckboxes = document.querySelectorAll('input[name="weekDays[]"]:checked');
            if (!weeklyCheckbox.checked && weekDaysCheckboxes.length === 0) {
                displayErrorMessage("recurrenceError", "If recurrence is selected, either the Weekly checkbox must be checked or at least one day must be selected.");
                TempData["error_message"] = "If recurrence is selected, either the Weekly checkbox must be checked or at least one day must be selected.";
                isValid = false;
            } else {
                hideErrorMessage("recurrenceError");
            }
        } else {
            hideErrorMessage("recurrenceError");
        }

        // 4. Time is in intervals of 15 minutes
        var startTime = document.getElementById("startTime").value;
        if (!validateTime(startTime)) {
            displayErrorMessage("startTime", "Start time must be in intervals of 15 minutes.");
            TempData["error_message"] = "Start time must be in intervals of 15 minutes.";
            isValid = false;
        } else {
            hideErrorMessage("startTime");
        }

        // 5. An appointment duration is selected
        var appointmentDuration = document.getElementById("appointmentDuration").value;
        if (appointmentDuration === "Select:") {
            displayErrorMessage("appointmentDuration", "Please select an appointment duration.");
            TempData["error_message"] = "Please select an appointment duration.";
            isValid = false;
        } else {
            hideErrorMessage("appointmentDuration");
        }

        // 6. Number of appointments is a whole number AND is at least 1, but no more than 10
        var numAppointments = parseInt(document.getElementById("numAppointments").value);
        if (isNaN(numAppointments) || numAppointments < 1 || numAppointments > 10 || numAppointments % 1 !== 0) {
            displayErrorMessage("numAppointments", "Number of appointments must be a whole number between 1 and 10.");
            TempData["error_message"] = "Number of appointments must be a whole number between 1 and 10.";
            isValid = false;
        } else {
            hideErrorMessage("numAppointments");
        }

        if (!isValid) {
            console.log("Validation failed. Error message:", TempData["error_message"]);
        }

        return isValid;
    }

    function validateTime(time) {
        var parts = time.split(":");
        var minutes = parseInt(parts[1]);
        return minutes % 15 === 0;
    }

    function displayErrorMessage(inputId, message) {
        var errorMessageElement = document.getElementById(inputId + "Error");
        errorMessageElement.textContent = message;
        errorMessageElement.style.color = "red";
        errorMessageElement.style.display = "block"; // Show the error message
    }

    function hideErrorMessage(inputId) {
        var errorMessageElement = document.getElementById(inputId + "Error");
        errorMessageElement.textContent = "";
        errorMessageElement.style.display = "none"; // Hide the error message
    }

    document.addEventListener('DOMContentLoaded', function () {
        var today = new Date().toISOString().split('T')[0];
        document.getElementById('startDate').value = today;
        document.getElementById('endDate').value = today;
    });</script>